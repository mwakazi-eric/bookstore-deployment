apiVersion: v1
kind: Namespace
metadata:
  name: bookstore-dev
---
apiVersion: v1
kind: Secret
metadata:
  name: bookstore-dev-secrets
  namespace: bookstore-dev
type: Opaque
stringData:
  MYSQL_ROOT_PASSWORD: my-secret-pw
  MYSQL_PASSWORD: bookstore-dev_password
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: bookstore-dev-configmap
  namespace: bookstore-dev
data:
  init.sql: |
    CREATE DATABASE IF NOT EXISTS `bookstore-dev_db`;

    -- For remote TCP access (e.g., app pods)
    CREATE USER IF NOT EXISTS 'bookstore-dev_user'@'%' IDENTIFIED BY 'bookstore-dev_password';

    GRANT ALL PRIVILEGES ON `bookstore-dev_db`.* TO 'bookstore-dev_user'@'%';

    -- For local (socket) access like inside MySQL pod
    CREATE USER IF NOT EXISTS 'bookstore-dev_user'@'localhost' IDENTIFIED BY 'bookstore-dev_password';
    GRANT ALL PRIVILEGES ON `bookstore-dev_db`.* TO 'bookstore-dev_user'@'localhost';

    FLUSH PRIVILEGES;
  MYSQL_DATABASE: bookstore-dev_db
  MYSQL_USER: bookstore-dev_user

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: bookstore-pv
  labels:
    app: bookstore
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /mnt/data/mysql # Must exist on the host node
  persistentVolumeReclaimPolicy: Retain
  storageClassName: ""  # ✅ Explicitly mark it as no storage class
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: bookstore-pvc
  namespace: bookstore-dev
  labels:
    app: bookstore
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  volumeName: bookstore-pv
  storageClassName: ""  # ✅ Match with the PV (no dynamic storage class)
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: bookstore-dev
spec:
  selector:
    app: mysql
  ports:
    - port: 3306
      targetPort: 3306
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: bookstore-dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:8
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: bookstore-dev-secrets
                  key: MYSQL_ROOT_PASSWORD
          volumeMounts:
            - name: mysql-data
              mountPath: /var/lib/mysql
            - name: init-script
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: mysql-data
          persistentVolumeClaim:
            claimName: bookstore-pvc
        - name: init-script
          configMap:
            name: bookstore-dev-configmap
